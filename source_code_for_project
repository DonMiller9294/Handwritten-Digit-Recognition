# Import necessary libraries
import numpy as np
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
import matplotlib.pyplot as plt

# Load and preprocess the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

# Build the neural network model
model = Sequential([
    Flatten(input_shape=(28, 28)),  # Flatten the 28x28 image to a 1D array
    Dense(128, activation='relu'),    # Hidden layer with 128 neurons and ReLU activation
    Dense(10, activation='softmax')   # Output layer with 10 neurons for each digit (0-9) and softmax activation
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=5)  # Training the model for 5 epochs

# Evaluate the model on test data
test_loss, test_accuracy = model.evaluate(x_test, y_test)
print(f"Test accuracy: {test_accuracy}")

# Function to predict and display images with their predicted labels
def show_predictions(images, labels):
    predictions = model.predict(images)
    fig, axes = plt.subplots(3, 3, figsize=(8, 8))
    for i, ax in enumerate(axes.flat):
        ax.imshow(images[i], cmap='gray')
        ax.set_title(f"Predicted: {np.argmax(predictions[i])}, Actual: {labels[i]}")
        ax.axis('off')
    plt.show()

# Show predictions on a few test images
num_images_to_show = 9
show_predictions(x_test[:num_images_to_show], y_test[:num_images_to_show])
